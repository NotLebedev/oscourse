#ifndef JOS_INC_LIMITS_H
#define JOS_INC_LIMITS_H

#include <float.h>

#define __libcxx_signed_b(T,B)	((T)(-1) < 0)

#define __libcxx_min_b(T,B)					\
  (__libcxx_signed_b (T,B) ? -__libcxx_max_b (T,B) - 1 : (T)0)

#define __libcxx_max_b(T,B)						\
  (__libcxx_signed_b (T,B) ?						\
   (((((T)1 << (__libcxx_digits_b (T,B) - 1)) - 1) << 1) + 1) : ~(T)0)

#define __libcxx_digits_b(T,B)				\
  (B - __libcxx_signed_b (T,B))

// The fraction 643/2136 approximates log10(2) to 7 significant digits.
#define __libcxx_digits10_b(T,B)		\
  (__libcxx_digits_b (T,B) * 643L / 2136)

#define __libcxx_signed(T) \
  __libcxx_signed_b (T, sizeof(T) * __CHAR_BIT__)
#define __libcxx_min(T) \
  __libcxx_min_b (T, sizeof(T) * __CHAR_BIT__)
#define __libcxx_max(T) \
  __libcxx_max_b (T, sizeof(T) * __CHAR_BIT__)
#define __libcxx_digits(T) \
  __libcxx_digits_b (T, sizeof(T) * __CHAR_BIT__)
#define __libcxx_digits10(T) \
  __libcxx_digits10_b (T, sizeof(T) * __CHAR_BIT__)

#define __libcxx_max_digits10(T) \
  (2 + (T) * 643L / 2136)

namespace std {
enum float_round_style {
    round_indeterminate         = -1,
    round_toward_zero           =  0,
    round_to_nearest            =  1,
    round_toward_infinity       =  2,
    round_toward_neg_infinity   =  3,
};

enum float_denorm_style {
    denorm_indeterminate = -1,
    denorm_absent        =  0,
    denorm_present       =  1
};

template<class T> class numeric_limits {
public:
    static constexpr bool is_specialized = true;

    static constexpr T min() noexcept { return __libcxx_min(T); }
    static constexpr T max() noexcept { return __libcxx_max(T);; }
    static constexpr T lowest() noexcept { return min(); }

    static constexpr int digits = __libcxx_digits (T);
    static constexpr int digits10 = __libcxx_digits10 (T);
    static constexpr int max_digits10 = 0;

    static constexpr bool is_signed = __libcxx_signed (T);
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr T epsilon() noexcept { return 0; }
    static constexpr T round_error() noexcept { return 0; }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr T infinity() noexcept { return T(); }
    static constexpr T quiet_NaN() noexcept { return T(); }
    static constexpr T signaling_NaN() noexcept { return T(); }
    static constexpr T denorm_min() noexcept { return static_cast<T>(0); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = !is_signed;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;

};

template<> class numeric_limits<bool> {
public:
    static constexpr bool is_specialized = true;

    static constexpr bool min() noexcept { return false; }
    static constexpr bool max() noexcept { return true; }
    static constexpr bool lowest() noexcept { return false; }

    static constexpr int digits = 1;
    static constexpr int digits10 = 0;
    static constexpr int max_digits10 = 0;

    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr bool epsilon() noexcept { return 0; }
    static constexpr bool round_error() noexcept { return 0; }

    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr bool infinity() noexcept { return 0; }
    static constexpr bool quiet_NaN() noexcept { return 0; }
    static constexpr bool signaling_NaN() noexcept { return 0; }
    static constexpr bool denorm_min() noexcept { return 0; }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;

};

// Disabled due to mno-sse
// template<> class numeric_limits<float>{
// public:
//     static constexpr bool is_specialized = true;
//
//     static constexpr float min() noexcept { return FLT_MIN; }
//     static constexpr float max() noexcept { return FLT_MAX; }
//     static constexpr float lowest() noexcept { return -FLT_MAX; }
//
//     static constexpr int digits = FLT_MANT_DIG;
//     static constexpr int digits10 = FLT_DIG;
//     static constexpr int max_digits10 = __libcxx_max_digits10 (FLT_MANT_DIG);
//
//     static constexpr bool is_signed = true;
//     static constexpr bool is_integer = false;
//     static constexpr bool is_exact = false;
//     static constexpr int radix = FLT_RADIX;
//     static constexpr float epsilon() noexcept { return FLT_EPSILON; }
//     static constexpr float round_error() noexcept { return 0.5F; }
//
//     static constexpr int min_exponent = FLT_MIN_EXP;
//     static constexpr int min_exponent10 = FLT_MIN_10_EXP;
//     static constexpr int max_exponent = FLT_MAX_EXP;
//     static constexpr int max_exponent10 = FLT_MAX_10_EXP;
//
//     static constexpr bool has_infinity = true;
//     static constexpr bool has_quiet_NaN = true;
//     static constexpr bool has_signaling_NaN = has_quiet_NaN;
//     static constexpr float_denorm_style has_denorm =
//         bool(FLT_HAS_SUBNORM) ? denorm_present : denorm_absent;
//     static constexpr bool has_denorm_loss = false;
//     static constexpr float infinity() noexcept { return __builtin_huge_valf(); }
//     static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); }
//     static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); }
//     static constexpr float denorm_min() noexcept { return 1.4013e-45; }
//
//     static constexpr bool is_iec559 =
//         has_infinity && has_quiet_NaN && has_denorm == denorm_present;
//     static constexpr bool is_bounded = true;
//     static constexpr bool is_modulo = false;
//
//     static constexpr bool traps = true;
//     static constexpr bool tinyness_before = false;
//     static constexpr float_round_style round_style = round_to_nearest;
//
// };
// template<> class numeric_limits<double>;
// template<> class numeric_limits<long double>;
}

#undef INT_LIMIT
#undef __libcxx_signed
#undef __libcxx_min
#undef __libcxx_max
#undef __libcxx_digits
#undef __libcxx_digits10
#undef __libcxx_max_digits10

#endif /* !JOS_INC_LIMITS_H */

#ifndef JOS_INC_SOURCE_LOCATION
#define JOS_INC_SOURCE_LOCATION

#ifdef COMP_GXX
#if __has_builtin(__builtin_source_location)
namespace std {
class source_location {
public:
static consteval source_location
current(const void* __p = __builtin_source_location()) noexcept
{
  source_location __ret;
  __ret._M_impl = static_cast <const __impl*>(__p);
  return __ret;
}

constexpr source_location() noexcept { }

constexpr unsigned
line() const noexcept
{ return _M_impl ? _M_impl->_M_line : 0u; }

constexpr unsigned
column() const noexcept
{ return _M_impl ? _M_impl->_M_column : 0u; }

constexpr const char*
file_name() const noexcept
{ return _M_impl ? _M_impl->_M_file_name : ""; }

constexpr const char*
function_name() const noexcept
{ return _M_impl ? _M_impl->_M_function_name : ""; }

private:
struct __impl
{
  const char* _M_file_name;
  const char* _M_function_name;
  unsigned _M_line;
  unsigned _M_column;
};

const __impl* _M_impl = nullptr;
};
}
#endif
#else
namespace std {
struct source_location {
private:
  unsigned int __m_line = 0;
  unsigned int __m_col = 0;
  const char *__m_file = nullptr;
  const char *__m_func = nullptr;
public:
  static constexpr source_location current(
      const char *__file = __builtin_FILE(),
      const char *__func = __builtin_FUNCTION(),
      unsigned int __line = __builtin_LINE(),
      unsigned int __col = __builtin_COLUMN()) noexcept {
    source_location __loc;
    __loc.__m_line = __line;
    __loc.__m_col = __col;
    __loc.__m_file = __file;
    __loc.__m_func = __func;
    return __loc;
  }
  constexpr source_location() = default;
  constexpr source_location(source_location const &) = default;
  constexpr unsigned int line() const noexcept { return __m_line; }
  constexpr unsigned int column() const noexcept { return __m_col; }
  constexpr const char *file_name() const noexcept { return __m_file; }
  constexpr const char *function_name() const noexcept { return __m_func; }
};
} // namespace std
#endif
#endif

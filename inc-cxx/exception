
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_EXCEPTION
#define _LIBCPP_EXCEPTION

#include <lib-cxx/addressof.h>

#include <stddef.h>
#include <inc-cxx/stdlib.h>
#include <inc-cxx/type_traits>
#include <inc-cxx/version>

namespace std {
class exception
{
public:
    exception() noexcept {}
    exception(const exception&) noexcept = default;

    virtual ~exception() noexcept {};
    virtual const char* what() const noexcept = 0;
};

class bad_exception
    : public exception
{
public:
    bad_exception() noexcept {}
    virtual ~bad_exception() noexcept {};
    virtual const char* what() const noexcept = 0;
};

typedef void (*unexpected_handler)();
unexpected_handler set_unexpected(unexpected_handler) noexcept;
unexpected_handler get_unexpected() noexcept;
[[noreturn]] void unexpected();

typedef void (*terminate_handler)();
 terminate_handler set_terminate(terminate_handler) noexcept;
 terminate_handler get_terminate() noexcept;
[[noreturn]]  void terminate() noexcept;

 bool uncaught_exception() noexcept;
 int uncaught_exceptions() noexcept;

class  exception_ptr;

 exception_ptr current_exception() noexcept;
[[noreturn]]  void rethrow_exception(exception_ptr);

class  exception_ptr
{
    void* __ptr_;
public:
     exception_ptr() noexcept : __ptr_() {}
     exception_ptr(nullptr_t) noexcept : __ptr_() {}

    exception_ptr(const exception_ptr&) noexcept;
    exception_ptr& operator=(const exception_ptr&) noexcept;
    ~exception_ptr() noexcept;

     explicit operator bool() const noexcept
    {return __ptr_ != nullptr;}

    friend
    bool operator==(const exception_ptr& __x, const exception_ptr& __y) noexcept
        {return __x.__ptr_ == __y.__ptr_;}

    friend
    bool operator!=(const exception_ptr& __x, const exception_ptr& __y) noexcept
        {return !(__x == __y);}

    friend  exception_ptr current_exception() noexcept;
    friend  void rethrow_exception(exception_ptr);
};

template<class _Ep>
 exception_ptr
make_exception_ptr(_Ep __e) noexcept
{
    try
    {
        throw __e;
    }
    catch (...)
    {
        return current_exception();
    }
}

// nested_exception

class  nested_exception
{
    exception_ptr __ptr_;
public:
    nested_exception() noexcept;
//     nested_exception(const nested_exception&) noexcept = default;
//     nested_exception& operator=(const nested_exception&) noexcept = default;
    virtual ~nested_exception() noexcept;

    // access functions
    [[noreturn]] void rethrow_nested() const;
     exception_ptr nested_ptr() const noexcept {return __ptr_;}
};

template <class _Tp>
struct __nested
    : public _Tp,
      public nested_exception
{
     explicit __nested(const _Tp& __t) : _Tp(__t) {}
};

template <class _Tp, class _Up, bool>
struct __throw_with_nested;

template <class _Tp, class _Up>
struct __throw_with_nested<_Tp, _Up, true> {
    [[noreturn]] static inline  void
    __do_throw(_Tp&& __t)
    {
        throw __nested<_Up>(static_cast<_Tp&&>(__t));
    }
};

template <class _Tp, class _Up>
struct __throw_with_nested<_Tp, _Up, false> {
    [[noreturn]] static inline  void
    __do_throw(_Tp&& __t)
    {
        throw static_cast<_Tp&&>(__t);
    }
};

template <class _Tp>
[[noreturn]]
void
throw_with_nested(_Tp&& __t)
{
    typedef typename decay<_Tp>::type _Up;
    __throw_with_nested<_Tp, _Up,
        is_class<_Up>::value &&
        true>::
            __do_throw(static_cast<_Tp&&>(__t));
}

template <class _From, class _To>
struct __can_dynamic_cast : public _LIBCPP_BOOL_CONSTANT(
              is_polymorphic<_From>::value &&
                 (!is_base_of<_To, _From>::value ||
                   is_convertible<const _From*, const _To*>::value)) {};

template <class _Ep>
inline void
rethrow_if_nested(const _Ep& __e,
                  typename enable_if< __can_dynamic_cast<_Ep, nested_exception>::value>::type* = 0)
{
    const nested_exception* __nep = dynamic_cast<const nested_exception*>(_VSTD::addressof(__e));
    if (__nep)
        __nep->rethrow_nested();
}

template <class _Ep>
inline
void
rethrow_if_nested(const _Ep&,
                  typename enable_if<!__can_dynamic_cast<_Ep, nested_exception>::value>::type* = 0)
{
}

} // namespace std

#endif // _LIBCPP_EXCEPTION
